<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Elias Rand â€” Bubble Map</title>
<style>
  /* Background canvas fills entire viewport */
  body, html {
    margin: 0; padding: 0; height: 100%;
    overflow: hidden;
    font-family: Arial, sans-serif;
    background: #f0f8ff;
    position: relative;
  }

  /* Canvas for animated background */
  #bg-canvas {
    position: fixed;
    top: 0; left: 0;
    width: 100vw;
    height: 100vh;
    z-index: 0;
  }

  /* Container for bubbles and lines */
  .container {
    position: relative;
    width: 900px;
    height: 700px;
    margin: 40px auto;
    z-index: 2; /* above canvas */
  }

  /* SVG for connecting lines positioned absolutely */
  svg {
    position: absolute;
    top: 0; left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none; /* clicks pass through */
    z-index: 1;
  }

  /* Bubble styles */
  .bubble {
    position: absolute;
    border-radius: 50%;
    background: #a3cef1;
    box-shadow: 0 0 10px rgba(0,0,0,0.15);
    display: flex;
    justify-content: center;
    align-items: center;
    font-weight: bold;
    color: #000;
    cursor: pointer;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    text-decoration: none;
    user-select: none;
    z-index: 3;
  }
  .bubble:hover {
    transform: scale(1.15);
    box-shadow: 0 0 20px rgba(0,0,0,0.25);
  }

  /* Bubble sizes and positions */
  .home {
    width: 150px;
    height: 150px;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }
  .portfolio {
    width: 110px;
    height: 110px;
    top: 28%;
    left: 33%;
    transform: translate(-50%, -50%);
  }
  .blog {
    width: 110px;
    height: 110px;
    top: 28%;
    left: 67%;
    transform: translate(-50%, -50%);
  }
  .music {
    width: 110px;
    height: 110px;
    top: 72%;
    left: 33%;
    transform: translate(-50%, -50%);
  }
  .resume {
    width: 110px;
    height: 110px;
    top: 72%;
    left: 67%;
    transform: translate(-50%, -50%);
  }
  .vlog {
    width: 110px;
    height: 110px;
    top: 12%;
    left: 50%;
    transform: translate(-50%, -50%);
  }

  /* Responsive fallback */
  @media (max-width: 600px) {
    .container {
      width: 100vw;
      height: 100vh;
      margin: 0;
    }
    .bubble {
      position: static !important;
      margin: 10px auto;
      width: 130px !important;
      height: 130px !important;
      transform: none !important;
      display: flex;
      justify-content: center;
      align-items: center;
    }
    .bubbles-wrapper {
      display: flex;
      flex-wrap: wrap;
      justify-content: center;
      gap: 20px;
      padding: 40px 10px;
    }
    svg {
      display: none;
    }
  }
</style>
</head>
<body>

<canvas id="bg-canvas"></canvas>

<div class="container" id="container">
  <!-- SVG for lines -->
  <svg id="connections"></svg>

  <!-- Bubbles -->
  <a href="#" class="bubble home" id="home">HOME</a>
  <a href="/portfolio" class="bubble portfolio" id="portfolio">PORTFOLIO</a>
  <a href="/blog" class="bubble blog" id="blog">BLOG</a>
  <a href="/music" class="bubble music" id="music">MUSIC</a>
  <a href="/resume" class="bubble resume" id="resume">RESUME</a>
  <a href="/vlog" class="bubble vlog" id="vlog">VLOG</a>
</div>

<script>
  // Connecting lines between bubbles
  const connectionsSvg = document.getElementById('connections');

  // IDs of bubbles to connect in pairs
  const pairs = [
    ['home', 'portfolio'],
    ['home', 'blog'],
    ['home', 'music'],
    ['home', 'resume'],
    ['home', 'vlog'],
    ['portfolio', 'music'],
    ['blog', 'resume'],
  ];

  function getCenter(el) {
    const rect = el.getBoundingClientRect();
    // Adjust for container scroll and position
    return {
      x: rect.left + rect.width/2 + window.scrollX,
      y: rect.top + rect.height/2 + window.scrollY
    };
  }

  function drawConnections() {
    connectionsSvg.innerHTML = '';
    pairs.forEach(([id1, id2]) => {
      const el1 = document.getElementById(id1);
      const el2 = document.getElementById(id2);
      if (!el1 || !el2) return;

      const p1 = getCenter(el1);
      const p2 = getCenter(el2);

      // Convert to SVG container coordinates (relative to svg)
      const svgRect = connectionsSvg.getBoundingClientRect();
      const x1 = p1.x - svgRect.left;
      const y1 = p1.y - svgRect.top;
      const x2 = p2.x - svgRect.left;
      const y2 = p2.y - svgRect.top;

      // Create a subtle curved path between bubbles
      const path = document.createElementNS("http://www.w3.org/2000/svg", "path");
      const dx = (x2 - x1) * 0.3;
      const dy = (y2 - y1) * 0.3;
      const d = `M${x1},${y1} C${x1 + dx},${y1 + dy} ${x2 - dx},${y2 - dy} ${x2},${y2}`;
      path.setAttribute('d', d);
      path.setAttribute('stroke', 'rgba(0,0,0,0.1)');
      path.setAttribute('stroke-width', '2');
      path.setAttribute('fill', 'none');
      connectionsSvg.appendChild(path);
    });
  }

  window.addEventListener('resize', drawConnections);
  window.addEventListener('load', drawConnections);

  // Animated geometric background
  const canvas = document.getElementById('bg-canvas');
  const ctx = canvas.getContext('2d');
  let width, height;
  let shapes = [];

  class Shape {
    constructor() {
      this.reset();
    }
    reset() {
      this.x = Math.random() * width;
      this.y = Math.random() * height;
      this.size = 20 + Math.random() * 50;
      this.speedX = (Math.random() - 0.5) * 0.15;
      this.speedY = (Math.random() - 0.5) * 0.15;
      this.opacity = 0.05 + Math.random() * 0.1;
      this.angle = Math.random() * Math.PI * 2;
      this.rotationSpeed = (Math.random() - 0.5) * 0.002;
      this.type = Math.random() < 0.5 ? 'circle' : 'square';
    }
    update() {
      this.x += this.speedX;
      this.y += this.speedY;
      this.angle += this.rotationSpeed;

      // Wrap around screen edges for smooth infinite flow
      if(this.x < -this.size) this.x = width + this.size;
      else if(this.x > width + this.size) this.x = -this.size;

      if(this.y < -this.size) this.y = height + this.size;
      else if(this.y > height + this.size) this.y = -this.size;
    }
    draw(ctx) {
      ctx.save();
      ctx.translate(this.x, this.y);
      ctx.rotate(this.angle);
      ctx.globalAlpha = this.opacity;
      ctx.fillStyle = '#a3cef1';
      if(this.type === 'circle') {
        ctx.beginPath();
        ctx.arc(0, 0, this.size/2, 0, Math.PI*2);
        ctx.fill();
      } else {
        ctx.fillRect(-this.size/2, -this.size/2, this.size, this.size);
      }
      ctx.restore();
    }
  }

  function setup() {
    resize();
    shapes = [];
    for(let i=0; i<40; i++) {
      shapes.push(new Shape());
    }
    animate();
  }

  function resize() {
    width = window.innerWidth;
    height = window.innerHeight;
    canvas.width = width;
    canvas.height = height;
  }

  window.addEventListener('resize', () => {
    resize();
  });

  function animate() {
    ctx.clearRect(0, 0, width, height);
    shapes.forEach(shape => {
      shape.update();
      shape.draw(ctx);
    });
    requestAnimationFrame(animate);
  }

  window.onload = setup;
</script>

</body>
</html>
